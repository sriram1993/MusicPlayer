{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"uri\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\nimport { RecordingOptionsPresets } from \"./Audio/RecordingConstants\";\nfunction getPermissionWithQueryAsync(_x) {\n  return _getPermissionWithQueryAsync.apply(this, arguments);\n}\nfunction _getPermissionWithQueryAsync() {\n  _getPermissionWithQueryAsync = _asyncToGenerator(function* (name) {\n    if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n    try {\n      var _yield$navigator$perm = yield navigator.permissions.query({\n          name: name\n        }),\n        state = _yield$navigator$perm.state;\n      switch (state) {\n        case 'granted':\n          return PermissionStatus.GRANTED;\n        case 'denied':\n          return PermissionStatus.DENIED;\n        default:\n          return PermissionStatus.UNDETERMINED;\n      }\n    } catch (_unused2) {\n      return PermissionStatus.UNDETERMINED;\n    }\n  });\n  return _getPermissionWithQueryAsync.apply(this, arguments);\n}\nfunction getUserMedia(constraints) {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n  var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n    var error = new Error('Permission unimplemented');\n    error.code = 0;\n    error.name = 'NotAllowedError';\n    throw error;\n  };\n  return new Promise(function (resolve, reject) {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying: isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n  return getStatusFromMedia(media);\n}\nvar mediaRecorder = null;\nvar mediaRecorderUptimeOfLastStartResume = 0;\nvar mediaRecorderDurationAlreadyRecorded = 0;\nvar mediaRecorderIsRecording = false;\nfunction getAudioRecorderDurationMillis() {\n  var duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n  getStatusForVideo: function () {\n    var _getStatusForVideo = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function getStatusForVideo(_x2) {\n      return _getStatusForVideo.apply(this, arguments);\n    }\n    return getStatusForVideo;\n  }(),\n  loadForVideo: function () {\n    var _loadForVideo = _asyncToGenerator(function* (element, nativeSource, fullInitialStatus) {\n      return getStatusFromMedia(element);\n    });\n    function loadForVideo(_x3, _x4, _x5) {\n      return _loadForVideo.apply(this, arguments);\n    }\n    return loadForVideo;\n  }(),\n  unloadForVideo: function () {\n    var _unloadForVideo = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function unloadForVideo(_x6) {\n      return _unloadForVideo.apply(this, arguments);\n    }\n    return unloadForVideo;\n  }(),\n  setStatusForVideo: function () {\n    var _setStatusForVideo = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function setStatusForVideo(_x7, _x8) {\n      return _setStatusForVideo.apply(this, arguments);\n    }\n    return setStatusForVideo;\n  }(),\n  replayVideo: function () {\n    var _replayVideo = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function replayVideo(_x9, _x10) {\n      return _replayVideo.apply(this, arguments);\n    }\n    return replayVideo;\n  }(),\n  setAudioMode: function () {\n    var _setAudioMode = _asyncToGenerator(function* () {});\n    function setAudioMode() {\n      return _setAudioMode.apply(this, arguments);\n    }\n    return setAudioMode;\n  }(),\n  setAudioIsEnabled: function () {\n    var _setAudioIsEnabled = _asyncToGenerator(function* () {});\n    function setAudioIsEnabled() {\n      return _setAudioIsEnabled.apply(this, arguments);\n    }\n    return setAudioIsEnabled;\n  }(),\n  getStatusForSound: function () {\n    var _getStatusForSound = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function getStatusForSound(_x11) {\n      return _getStatusForSound.apply(this, arguments);\n    }\n    return getStatusForSound;\n  }(),\n  loadForSound: function () {\n    var _loadForSound = _asyncToGenerator(function* (nativeSource, fullInitialStatus) {\n      var source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      var media = new Audio(source);\n      media.ontimeupdate = function () {\n        SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = function () {\n        SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      var status = setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    });\n    function loadForSound(_x12, _x13) {\n      return _loadForSound.apply(this, arguments);\n    }\n    return loadForSound;\n  }(),\n  unloadForSound: function () {\n    var _unloadForSound = _asyncToGenerator(function* (element) {\n      element.pause();\n      element.removeAttribute('src');\n      element.load();\n      return getStatusFromMedia(element);\n    });\n    function unloadForSound(_x14) {\n      return _unloadForSound.apply(this, arguments);\n    }\n    return unloadForSound;\n  }(),\n  setStatusForSound: function () {\n    var _setStatusForSound = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function setStatusForSound(_x15, _x16) {\n      return _setStatusForSound.apply(this, arguments);\n    }\n    return setStatusForSound;\n  }(),\n  replaySound: function () {\n    var _replaySound = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function replaySound(_x17, _x18) {\n      return _replaySound.apply(this, arguments);\n    }\n    return replaySound;\n  }(),\n  getAudioRecordingStatus: function () {\n    var _getAudioRecordingStatus = _asyncToGenerator(function* () {\n      var _mediaRecorder, _mediaRecorder2, _mediaRecorder3;\n      return {\n        canRecord: ((_mediaRecorder = mediaRecorder) == null ? void 0 : _mediaRecorder.state) === 'recording' || ((_mediaRecorder2 = mediaRecorder) == null ? void 0 : _mediaRecorder2.state) === 'inactive',\n        isRecording: ((_mediaRecorder3 = mediaRecorder) == null ? void 0 : _mediaRecorder3.state) === 'recording',\n        isDoneRecording: false,\n        durationMillis: getAudioRecorderDurationMillis(),\n        uri: null\n      };\n    });\n    function getAudioRecordingStatus() {\n      return _getAudioRecordingStatus.apply(this, arguments);\n    }\n    return getAudioRecordingStatus;\n  }(),\n  prepareAudioRecorder: function () {\n    var _prepareAudioRecorder = _asyncToGenerator(function* (options) {\n      if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n        throw new Error('No media devices available');\n      }\n      mediaRecorderUptimeOfLastStartResume = 0;\n      mediaRecorderDurationAlreadyRecorded = 0;\n      var stream = yield getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new window.MediaRecorder(stream, (options == null ? void 0 : options.web) || RecordingOptionsPresets.HIGH_QUALITY.web);\n      mediaRecorder.addEventListener('pause', function () {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n      });\n      mediaRecorder.addEventListener('resume', function () {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('start', function () {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderDurationAlreadyRecorded = 0;\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('stop', function () {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n        stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      });\n      var _yield$this$getAudioR = yield this.getAudioRecordingStatus(),\n        uri = _yield$this$getAudioR.uri,\n        status = _objectWithoutProperties(_yield$this$getAudioR, _excluded);\n      return {\n        uri: null,\n        status: status\n      };\n    });\n    function prepareAudioRecorder(_x19) {\n      return _prepareAudioRecorder.apply(this, arguments);\n    }\n    return prepareAudioRecorder;\n  }(),\n  startAudioRecording: function () {\n    var _startAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n      } else {\n        mediaRecorder.start();\n      }\n      return this.getAudioRecordingStatus();\n    });\n    function startAudioRecording() {\n      return _startAudioRecording.apply(this, arguments);\n    }\n    return startAudioRecording;\n  }(),\n  pauseAudioRecording: function () {\n    var _pauseAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      mediaRecorder.pause();\n      return this.getAudioRecordingStatus();\n    });\n    function pauseAudioRecording() {\n      return _pauseAudioRecording.apply(this, arguments);\n    }\n    return pauseAudioRecording;\n  }(),\n  stopAudioRecording: function () {\n    var _stopAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'inactive') {\n        return this.getAudioRecordingStatus();\n      }\n      var dataPromise = new Promise(function (resolve) {\n        return mediaRecorder.addEventListener('dataavailable', function (e) {\n          return resolve(e.data);\n        });\n      });\n      mediaRecorder.stop();\n      var data = yield dataPromise;\n      var url = URL.createObjectURL(data);\n      return _objectSpread(_objectSpread({}, yield this.getAudioRecordingStatus()), {}, {\n        uri: url\n      });\n    });\n    function stopAudioRecording() {\n      return _stopAudioRecording.apply(this, arguments);\n    }\n    return stopAudioRecording;\n  }(),\n  unloadAudioRecorder: function () {\n    var _unloadAudioRecorder = _asyncToGenerator(function* () {\n      mediaRecorder = null;\n    });\n    function unloadAudioRecorder() {\n      return _unloadAudioRecorder.apply(this, arguments);\n    }\n    return unloadAudioRecorder;\n  }(),\n  getPermissionsAsync: function () {\n    var _getPermissionsAsync = _asyncToGenerator(function* () {\n      var maybeStatus = yield getPermissionWithQueryAsync('microphone');\n      switch (maybeStatus) {\n        case PermissionStatus.GRANTED:\n          return {\n            status: PermissionStatus.GRANTED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: true\n          };\n        case PermissionStatus.DENIED:\n          return {\n            status: PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false\n          };\n        default:\n          return yield this.requestPermissionsAsync();\n      }\n    });\n    function getPermissionsAsync() {\n      return _getPermissionsAsync.apply(this, arguments);\n    }\n    return getPermissionsAsync;\n  }(),\n  requestPermissionsAsync: function () {\n    var _requestPermissionsAsync = _asyncToGenerator(function* () {\n      try {\n        var stream = yield getUserMedia({\n          audio: true\n        });\n        stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      } catch (_unused) {\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      }\n    });\n    function requestPermissionsAsync() {\n      return _requestPermissionsAsync.apply(this, arguments);\n    }\n    return requestPermissionsAsync;\n  }()\n};","map":{"version":3,"names":["PermissionStatus","SyntheticPlatformEmitter","RecordingOptionsPresets","getPermissionWithQueryAsync","_x","_getPermissionWithQueryAsync","apply","arguments","_asyncToGenerator","name","navigator","permissions","query","_yield$navigator$perm","state","GRANTED","DENIED","UNDETERMINED","_unused2","getUserMedia","constraints","mediaDevices","webkitGetUserMedia","mozGetUserMedia","error","Error","code","Promise","resolve","reject","call","getStatusFromMedia","media","isLoaded","undefined","isPlaying","currentTime","paused","ended","readyState","status","uri","src","progressUpdateIntervalMillis","durationMillis","duration","positionMillis","shouldPlay","autoplay","isBuffering","rate","playbackRate","shouldCorrectPitch","volume","isMuted","muted","isLooping","loop","didJustFinish","setStatusForMedia","play","pause","mediaRecorder","mediaRecorderUptimeOfLastStartResume","mediaRecorderDurationAlreadyRecorded","mediaRecorderIsRecording","getAudioRecorderDurationMillis","Date","now","getStatusForVideo","_getStatusForVideo","element","_x2","loadForVideo","_loadForVideo","nativeSource","fullInitialStatus","_x3","_x4","_x5","unloadForVideo","_unloadForVideo","_x6","setStatusForVideo","_setStatusForVideo","_x7","_x8","replayVideo","_replayVideo","_x9","_x10","setAudioMode","_setAudioMode","setAudioIsEnabled","_setAudioIsEnabled","getStatusForSound","_getStatusForSound","_x11","loadForSound","_loadForSound","source","Audio","ontimeupdate","emit","key","onerror","message","_x12","_x13","unloadForSound","_unloadForSound","removeAttribute","load","_x14","setStatusForSound","_setStatusForSound","_x15","_x16","replaySound","_replaySound","_x17","_x18","getAudioRecordingStatus","_getAudioRecordingStatus","_mediaRecorder","_mediaRecorder2","_mediaRecorder3","canRecord","isRecording","isDoneRecording","prepareAudioRecorder","_prepareAudioRecorder","options","stream","audio","window","MediaRecorder","web","HIGH_QUALITY","addEventListener","getTracks","forEach","track","stop","_yield$this$getAudioR","_objectWithoutProperties","_excluded","_x19","startAudioRecording","_startAudioRecording","resume","start","pauseAudioRecording","_pauseAudioRecording","stopAudioRecording","_stopAudioRecording","dataPromise","e","data","url","URL","createObjectURL","_objectSpread","unloadAudioRecorder","_unloadAudioRecorder","getPermissionsAsync","_getPermissionsAsync","maybeStatus","expires","canAskAgain","granted","requestPermissionsAsync","_requestPermissionsAsync","_unused"],"sources":["../src/ExponentAV.web.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport type { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV.types';\nimport type { RecordingStatus } from './Audio/Recording.types';\nimport { RecordingOptionsPresets } from './Audio/RecordingConstants';\n\nasync function getPermissionWithQueryAsync(\n  name: PermissionNameWithAdditionalValues\n): Promise<PermissionStatus | null> {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n\n  try {\n    const { state } = await navigator.permissions.query({ name });\n    switch (state) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n      case 'denied':\n        return PermissionStatus.DENIED;\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  } catch {\n    // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n    return PermissionStatus.UNDETERMINED;\n  }\n}\n\nfunction getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    function () {\n      const error: any = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: AVPlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(\n  media: HTMLMediaElement,\n  status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nlet mediaRecorder: null | any /*MediaRecorder*/ = null;\nlet mediaRecorderUptimeOfLastStartResume: number = 0;\nlet mediaRecorderDurationAlreadyRecorded: number = 0;\nlet mediaRecorderIsRecording: boolean = false;\n\nfunction getAudioRecorderDurationMillis() {\n  let duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: AVPlaybackNativeSource,\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus(): Promise<RecordingStatus> {\n    return {\n      canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n      isRecording: mediaRecorder?.state === 'recording',\n      isDoneRecording: false,\n      durationMillis: getAudioRecorderDurationMillis(),\n      uri: null,\n    };\n  },\n  async prepareAudioRecorder(options): Promise<{\n    uri: string | null;\n    // status is of type RecordingStatus, but without the canRecord field populated\n    status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n  }> {\n    if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n      throw new Error('No media devices available');\n    }\n\n    mediaRecorderUptimeOfLastStartResume = 0;\n    mediaRecorderDurationAlreadyRecorded = 0;\n\n    const stream = await getUserMedia({ audio: true });\n\n    mediaRecorder = new (window as any).MediaRecorder(\n      stream,\n      options?.web || RecordingOptionsPresets.HIGH_QUALITY.web\n    );\n\n    mediaRecorder.addEventListener('pause', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n    });\n\n    mediaRecorder.addEventListener('resume', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('start', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderDurationAlreadyRecorded = 0;\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('stop', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n\n      // Clears recording icon in Chrome tab\n      stream.getTracks().forEach((track) => track.stop());\n    });\n\n    const { uri, ...status } = await this.getAudioRecordingStatus();\n\n    return { uri: null, status };\n  },\n  async startAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    } else {\n      mediaRecorder.start();\n    }\n\n    return this.getAudioRecordingStatus();\n  },\n  async pauseAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    // Set status to paused\n    mediaRecorder.pause();\n\n    return this.getAudioRecordingStatus();\n  },\n  async stopAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'inactive') {\n      return this.getAudioRecordingStatus();\n    }\n\n    const dataPromise = new Promise<Blob>((resolve) =>\n      mediaRecorder.addEventListener('dataavailable', (e) => resolve(e.data))\n    );\n\n    mediaRecorder.stop();\n\n    const data = await dataPromise;\n    const url = URL.createObjectURL(data);\n\n    return {\n      ...(await this.getAudioRecordingStatus()),\n      uri: url,\n    };\n  },\n  async unloadAudioRecorder(): Promise<void> {\n    mediaRecorder = null;\n  },\n\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    const maybeStatus = await getPermissionWithQueryAsync('microphone');\n    switch (maybeStatus) {\n      case PermissionStatus.GRANTED:\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true,\n        };\n      case PermissionStatus.DENIED:\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false,\n        };\n      default:\n        return await this.requestPermissionsAsync();\n    }\n  },\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    try {\n      const stream = await getUserMedia({ audio: true });\n      stream.getTracks().forEach((track) => track.stop());\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: true,\n      };\n    } catch {\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    }\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}